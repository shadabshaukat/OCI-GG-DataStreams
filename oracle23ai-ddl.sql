CREATE TABLE iot_temperature_feed (
    id              NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    device_id       VARCHAR2(50),
    city            VARCHAR2(100),
    temperature     NUMBER(5,2),
    reading_time    TIMESTAMP,
    location        SDO_GEOMETRY
)
PARTITION BY RANGE (reading_time) INTERVAL (NUMTODSINTERVAL(1, 'DAY'))
(
    PARTITION p_initial VALUES LESS THAN (TO_TIMESTAMP('2025-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'))
);


--The above uses interval partitioning, so Oracle db will auto-create new partitions as time progresses.

-- City Table with GPS Coordinates --
CREATE TABLE australian_cities (
    city_name   VARCHAR2(100),
    avg_temp    NUMBER(5,2),
    latitude    NUMBER(9,6),
    longitude   NUMBER(9,6)
);

INSERT INTO australian_cities VALUES ('Sydney', 21.0, -33.8688, 151.2093);
INSERT INTO australian_cities VALUES ('Melbourne', 19.0, -37.8136, 144.9631);
INSERT INTO australian_cities VALUES ('Brisbane', 25.0, -27.4698, 153.0251);
INSERT INTO australian_cities VALUES ('Perth', 23.5, -31.9505, 115.8605);
INSERT INTO australian_cities VALUES ('Adelaide', 22.0, -34.9285, 138.6007);
INSERT INTO australian_cities VALUES ('Canberra', 16.0, -35.2809, 149.1300);
INSERT INTO australian_cities VALUES ('Hobart', 14.0, -42.8821, 147.3272);
INSERT INTO australian_cities VALUES ('Darwin', 28.0, -12.4634, 130.8456);

COMMIT;


-- Data Generator Procedure (with SDO_GEOMETRY)--
CREATE OR REPLACE PROCEDURE simulate_iot_temperature_feed IS
    v_city       australian_cities.city_name%TYPE;
    v_avg_temp   australian_cities.avg_temp%TYPE;
    v_lat        NUMBER(9,6);
    v_lon        NUMBER(9,6);
    v_device_id  VARCHAR2(50);
    v_temp       NUMBER(5,2);
    v_loc        SDO_GEOMETRY;
BEGIN
    FOR i IN 1 .. 100 LOOP
        -- Pick a random city
        SELECT city_name, avg_temp, latitude, longitude
        INTO v_city, v_avg_temp, v_lat, v_lon
        FROM (
            SELECT * FROM australian_cities
            ORDER BY DBMS_RANDOM.VALUE
        )
        WHERE ROWNUM = 1;

        -- Slight variation in GPS to simulate real devices nearby
        v_lat := v_lat + DBMS_RANDOM.VALUE(-0.01, 0.01);
        v_lon := v_lon + DBMS_RANDOM.VALUE(-0.01, 0.01);

        -- Create SDO_GEOMETRY object
        v_loc := SDO_GEOMETRY(
            2001, -- 2D Point
            8307, -- SRID WGS84
            SDO_POINT_TYPE(v_lon, v_lat, NULL),
            NULL,
            NULL
        );

        -- Generate device and temp
        v_device_id := 'dev-' || DBMS_RANDOM.STRING('U', 6);
        v_temp := ROUND(v_avg_temp + DBMS_RANDOM.VALUE(-5, 5), 2);

        -- Insert into partitioned table
        INSERT INTO iot_temperature_feed (device_id, city, temperature, reading_time, location)
        VALUES (v_device_id, v_city, v_temp, SYSTIMESTAMP, v_loc);
    END LOOP;
    COMMIT;
END;
/

-- Wrap the procedure call in a wrapper that loops 3x --
CREATE OR REPLACE PROCEDURE simulate_iot_temperature_feed_batch IS
BEGIN
    FOR i IN 1 .. 3 LOOP
        simulate_iot_temperature_feed;
    END LOOP;
END;
/

-- Create the DBMS_SCHEDULER job --
BEGIN
    DBMS_SCHEDULER.create_job (
        job_name        => 'IOT_FEED_JOB',
        job_type        => 'PLSQL_BLOCK',
        job_action      => 'BEGIN simulate_iot_temperature_feed_batch; END;',
        start_date      => SYSTIMESTAMP,
        repeat_interval => 'FREQ=SECONDLY; INTERVAL=10',
        enabled         => TRUE,
        auto_drop       => FALSE,
        comments        => 'Inserts 300 IoT temperature records every 10 seconds.'
    );
END;
/

--BEGIN
    DBMS_SCHEDULER.DISABLE('IOT_FEED_JOB');
END;
/

--BEGIN
    DBMS_SCHEDULER.DROP_JOB('IOT_FEED_JOB');
END;
/
